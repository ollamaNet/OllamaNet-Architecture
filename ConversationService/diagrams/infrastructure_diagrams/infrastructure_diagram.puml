@startuml ConversationService_Infrastructure

' Custom styling
skinparam rectangle {
  BackgroundColor #f0f0f0
  BorderColor #2c3e50
  FontColor #2c3e50
}
skinparam database {
  BackgroundColor #c5e1a5
  BorderColor #558b2f
  FontColor #2c3e50
}
skinparam arrow {
  Color #2c3e50
  FontColor #2c3e50
}
skinparam note {
  BackgroundColor #fff9c4
  BorderColor #f9a825
  FontColor #2c3e50
}

' Custom stereotypes with colors
skinparam rectangle<<external>> {
  BackgroundColor #95A5A6
  BorderColor #7F8C8D
}
skinparam rectangle<<cache>> {
  BackgroundColor #3498DB
  BorderColor #2980B9
}
skinparam rectangle<<storage>> {
  BackgroundColor #2ECC71
  BorderColor #27AE60
}
skinparam rectangle<<vectordb>> {
  BackgroundColor #9B59B6
  BorderColor #8E44AD
}
skinparam rectangle<<llm>> {
  BackgroundColor #F39C12
  BorderColor #D35400
}
skinparam database<<vectordb>> {
  BackgroundColor #9B59B6
  BorderColor #8E44AD
}
skinparam database<<cache>> {
  BackgroundColor #3498DB
  BorderColor #2980B9
}
skinparam database<<sql>> {
  BackgroundColor #95A5A6
  BorderColor #7F8C8D
}
skinparam database<<storage>> {
  BackgroundColor #2ECC71
  BorderColor #27AE60
}

' Legend
legend right
  Legend
  |= Type |= Description |
  |<#08427B>| person |
  |<#1168BD>| system |
  |<#438DD5>| container |
  |<#65688A>| external person |
  |<#999999>| external system |
  |<#B3B3B3>| external container |
endlegend

title "ConversationService - Infrastructure Diagram"

' Infrastructure components
rectangle "API Gateway\n\nAuthentication & Routing\n\nHandles authentication before requests reach the service" as api_gateway

rectangle "Application Server" as app_server {
  rectangle "ConversationService\n\n.NET 8\n\nMain service application" as conversation_service
  
  rectangle "Caching Infrastructure" as cache_infrastructure <<cache>> {
    rectangle "CacheManager\n\nCache-aside pattern implementation" as cache_manager
    rectangle "RedisCacheService\n\nRedis client implementation" as redis_client
    rectangle "RedisCacheSettings\n\nCache configuration" as cache_settings
  }
  
  rectangle "Document Storage" as storage_infrastructure <<storage>> {
    rectangle "FileSystemDocumentStorage\n\nLocal file system storage" as doc_storage
    rectangle "DocumentManagementOptions\n\nStorage configuration & security" as doc_settings
    rectangle "Path Generator\n\nSecure path generation & validation" as path_generator
  }
  
  rectangle "Vector Database" as vector_infrastructure <<vectordb>> {
    rectangle "PineconeService\n\nPinecone API client" as pinecone_service
    rectangle "PineconeOptions\n\nPinecone configuration" as pinecone_settings
    rectangle "Vector Operations\n\nVector storage & retrieval" as vector_operations
  }
  
  rectangle "LLM Integration" as llm_infrastructure <<llm>> {
    rectangle "OllamaConnector\n\nFlexible LLM connector" as ollama_connector
    rectangle "OllamaApi Settings\n\nLLM API configuration" as llm_settings
    rectangle "Streaming Handler\n\nManages streaming responses" as streaming_handler
  }
  
  rectangle "Resilience" as resilience_infrastructure {
    rectangle "Retry Logic\n\nRetry mechanisms for external services" as retry_logic
    rectangle "Circuit Breakers\n\nPrevents cascading failures" as circuit_breaker
    rectangle "Fallback Strategies\n\nGraceful degradation" as fallback_strategies
  }
  
  rectangle "Monitoring" as logging_monitoring {
    rectangle "Logging\n\nContextual logging" as logging
    rectangle "Performance Monitoring\n\nTiming & metrics" as performance
    rectangle "Error Tracking\n\nException handling" as error_tracking
  }
}

rectangle "External Services" as external_services {
  database "Redis Cache\n\nDistributed caching system" as redis <<cache>>
  database "SQL Database\n\nStores application data" as sql_db <<sql>>
  database "Pinecone\n\nVector Database\n\nStores vector embeddings" as vector_db <<vectordb>>
  rectangle "LLM Inference Engine\n\nProvides AI text generation" as llm_service <<llm>>
  database "Document Storage\n\nCurrently local, planned migration to cloud" as doc_storage_ext <<storage>>
}

' Define relationships
api_gateway --> conversation_service : Routes authenticated requests to\n[HTTPS/REST]

conversation_service --> cache_infrastructure : Uses
conversation_service --> storage_infrastructure : Uses
conversation_service --> vector_infrastructure : Uses
conversation_service --> llm_infrastructure : Uses

cache_infrastructure -right-> redis : Connects to\n[Redis Protocol]
storage_infrastructure -down-> doc_storage_ext : Stores files in\n[File I/O]
vector_infrastructure -left-> vector_db : Queries & indexes\n[HTTPS/REST]
llm_infrastructure -up-> llm_service : Sends prompts to\n[HTTPS/REST]

conversation_service --> sql_db : Persists data in\n[Entity Framework Core]

cache_manager --> redis_client : Uses
redis_client --> cache_settings : Configured by

doc_storage --> doc_settings : Configured by
doc_storage --> path_generator : Uses for security

pinecone_service --> pinecone_settings : Configured by
pinecone_service --> vector_operations : Performs

ollama_connector --> llm_settings : Configured by
ollama_connector --> streaming_handler : Uses for streaming

conversation_service --> resilience_infrastructure : Uses
conversation_service --> logging_monitoring : Uses

' Add notes about key infrastructure details
note right of cache_infrastructure
  Cache-aside pattern with
  fallback to database on failures
  Configurable timeouts and retries
end note

note right of storage_infrastructure
  Currently file system based
  Planned migration to cloud storage
  Secure path generation for files
end note

note right of vector_infrastructure
  Pinecone API integration
  Vector embedding storage
  Similarity search for RAG
end note

note right of llm_infrastructure
  Flexible connector design
  Supports different LLM frameworks
  Exception-based error handling
end note

note right of api_gateway
  Handles authentication
  before requests reach
  the service
end note

@enduml 