@startuml Class Diagram

' Controllers
class ChatController {
  +SendMessage(PromptRequest)
  +StreamMessage(PromptRequest)
}

class ConversationController {
  +Create(OpenConversationRequest)
  +GetAll(int page, int pageSize)
  +Search(string term, int page, int pageSize)
  +GetById(string conversationId)
  +GetMessages(string conversationId)
  +Update(string conversationId, UpdateConversationRequest)
  +Delete(string conversationId)
}

' Services
interface IChatService {
  +GetModelResponse(PromptRequest)
  +GetStreamedModelResponse(PromptRequest)
}

interface IConversationService {
  +CreateConversationAsync(string userId, OpenConversationRequest)
  +GetConversationsAsync(string userId, int page, int pageSize)
  +SearchConversationsAsync(string userId, string term, int page, int pageSize)
  +GetConversationInfoAsync(string conversationId)
  +GetConversationMessagesAsync(string conversationId)
  +UpdateConversationAsync(string conversationId, UpdateConversationRequest)
  +DeleteConversationAsync(string conversationId)
}

' DTOs
class PromptRequest {
  +ConversationId
  +Model
  +SystemMessage
  +Content
  +Options
  +CreatedAt
}

class Options {
  +Temperature
  +NumKeep
  +Seed
  +NumPredict
  +RepeatLastN
  +PresencePenalty
  +Mirostat
  +MirostatTau
  +MirostatEta
  +Stop
  +Numa
  +NumCtx
  +NumBatch
  +LowVram
  +VocabOnly
  +UseMmap
  +UseMlock
  +NumThread
}

class ChatResponse {
  +ResposneId
  +ConversationId
  +ModelName
  +Content
  +TotalDuration
  +LoadDuration
  +PromptEvalCount
  +PromptEvalDuration
  +EvalCount
  +EvalDuration
  +CreatedAt
}

class OllamaModelResponse {
  +Model
  +CreatedAt
  +Response
  +Done
  +Context
}

' History Management
class ChatHistoryManager {
  +GetChatHistoryWithCachingAsync(PromptRequest)
  +GetChatHistoryAsync(PromptRequest)
  +UpdateChatHistoryInCacheAsync(string, ChatHistory)
  +InvalidateChatHistoryCacheAsync(string)
  +SaveStreamedChatInteractionAsync(PromptRequest, List<OllamaModelResponse>, ChatHistory)
  +SaveChatInteractionAsync(PromptRequest, IReadOnlyList<OllamaModelResponse>, ChatHistory)
}

' Validators
class PromptRequestValidator {
  +ValidateAsync(PromptRequest)
}

class OpenConversationRequestValidator {
  +ValidateAsync(OpenConversationRequest)
}

class UpdateConversationRequestValidator {
  +ValidateAsync(UpdateConversationRequest)
}

' Relationships
ChatController --> IChatService
ChatController --> PromptRequestValidator
ConversationController --> IConversationService
ConversationController --> OpenConversationRequestValidator
ConversationController --> UpdateConversationRequestValidator

IChatService --> ChatHistoryManager
IChatService --> OllamaModelResponse
ChatHistoryManager --> PromptRequest
ChatHistoryManager --> OllamaModelResponse
ChatHistoryManager --> ChatHistory

@enduml 