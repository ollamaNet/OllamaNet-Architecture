# OllamaNet Platform Project Intelligence

This file captures key patterns, preferences, and project insights for the OllamaNet microservices platform.

## Project Structure

- **Multiple Microservices**: The platform consists of Gateway, ConversationService, AuthService, AdminService, and ExploreService
- **Service-Specific Memory Banks**: Each service has its own memory bank at [ServiceName]/[ServiceName]-memory-bank/
- **Solution-Level Memory Bank**: Core documentation at root memory-bank/ directory
- **Shared Database Layer**: Common Ollama_DB_layer used by all services

## Architecture Patterns

- **Clean Architecture**: Controllers → Services → Repositories → Database
- **Microservices Communication**: REST API calls through Gateway
- **Shared Database Approach**: Single database instance with common schema
- **Caching Strategy**: Redis-based with domain-specific TTL values
- **Authentication**: JWT tokens with claims-based identity
- **Streaming Pattern**: Server-Sent Events with IAsyncEnumerable

## Core Dependencies

- **.NET 9.0**: All services built on the latest .NET
- **Entity Framework Core**: For database operations 
- **SQL Server**: Primary database at db19911.public.databaseasp.net
- **Redis**: Upstash-hosted at content-ghoul-42217.upstash.io
- **OllamaSharp**: Integration with Ollama via ngrok endpoint

## Implementation Standards

- **ServiceExtensions.cs**: All services use extension methods for registration
- **Redis Cache Settings**: Domain-specific TTL values in RedisCacheSettings
- **FluentValidation**: Request validation across all services
- **JWT Authentication**: Token-based security with consistent validation
- **Repository Pattern**: Data access abstraction through Ollama_DB_layer
- **Ocelot Configuration**: Service-specific routing in Gateway
- **Exception Hierarchy**: Specialized exceptions for different scenarios

## Key Configurations

- **appsettings.json**: Follows consistent format across services
- **JWT Settings**: 30-day token lifetime (43200 minutes)
- **Redis TTL Values**: Domain-specific expiration times
- **CORS Policy**: Configured for localhost:5173
- **Ollama API**: Currently connecting via https://704e-35-196-162-195.ngrok-free.app

## Service Responsibilities

### Gateway Service
- Request routing to appropriate microservices
- Authentication middleware for JWT validation
- Rate limiting capabilities
- Request transformation

### ConversationService
- Conversation management and organization
- Real-time chat with streaming responses
- Folder organization for conversations
- Note management for conversations
- Feedback collection on AI responses

### AuthService
- User authentication and authorization
- JWT token generation and validation
- Refresh token functionality
- Password management
- User profile operations

### AdminService
- Platform administration controls
- User management for administrators
- Model and tag management
- Inference operations with progress streaming
- System configuration

### ExploreService
- Model discovery and browsing
- Detailed model information retrieval
- Tag-based filtering
- Cached model metadata

## Common Data Structures

- **User**: Identity user with additional profile information
- **Conversation**: User conversation with AI models
- **Message**: Individual chat message within a conversation
- **Folder**: Organizational structure for conversations
- **Model**: AI model metadata and configuration
- **Tag**: Categorization label for models

## API Conventions

- **Resource-Based Routes**: /api/{resource} pattern
- **HTTP Methods**: GET, POST, PUT, DELETE for appropriate operations
- **Status Codes**: 200 (success), 400 (validation), 401 (auth), 404 (not found), 500 (error)
- **Pagination**: page and pageSize query parameters
- **Validation**: Request models validated with FluentValidation
- **Response Format**: Consistent JSON structure across services

## Common Challenges

- **Search Functionality**: Currently limited and needs enhancement
- **Caching Optimization**: For large conversation histories
- **Rate Limiting**: Not fully implemented across all endpoints
- **Background Processing**: Post-streaming operations need monitoring
- **Integration Testing**: Limited across services
- **Conversation Archiving**: Not yet implemented

## Current Priorities

- Enhance search functionality with proper database-level search
- Optimize caching for conversation history
- Implement rate limiting across all services
- Improve error handling for external service failures
- Add monitoring for background processing tasks

## Code Style Preferences

- **Async/Await**: Used consistently throughout the codebase
- **Constructor Injection**: For dependencies in services and controllers
- **Extension Methods**: For service registration and organization
- **Try/Catch Blocks**: Controller-level exception handling
- **Stopwatch**: For performance monitoring of operations
- **Repository Abstraction**: For data access operations
- **Fluent API**: For entity configuration and validation 