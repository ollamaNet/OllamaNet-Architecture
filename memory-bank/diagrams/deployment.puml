@startuml OllamaNet_Deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title OllamaNet Deployment Architecture

Deployment_Node(client, "Client", "User Device") {
    Container(browser, "Web Browser", "Chrome, Firefox, Safari, Edge", "User interface for OllamaNet platform")
}

Deployment_Node(cloud, "Cloud Environment", "Azure/AWS") {
    Deployment_Node(web_tier, "Web Tier", "Azure App Service/AWS Elastic Beanstalk") {
        Container(frontend_app, "Frontend Application", "HTML, CSS, JavaScript", "Web UI for OllamaNet platform")
    }
    
    Deployment_Node(api_tier, "API Tier", "Azure App Service/AWS Elastic Beanstalk") {
        Container(gateway_service, "Gateway Service", ".NET 9.0, Ocelot", "API Gateway")
        
        Container(auth_service, "Auth Service", ".NET 9.0, ASP.NET Core", "Authentication Service")
        Container(admin_service, "Admin Service", ".NET 9.0, ASP.NET Core", "Administration Service")
        Container(explore_service, "Explore Service", ".NET 9.0, ASP.NET Core", "Model Exploration Service")
        Container(conversation_service, "Conversation Service", ".NET 9.0, ASP.NET Core", "Conversation Management Service")
    }
    
    Deployment_Node(data_tier, "Data Tier", "Azure SQL/AWS RDS") {
        ContainerDb(sql_server, "SQL Server", "Azure SQL/AWS RDS", "Persistent storage for all services")
    }
    
    Deployment_Node(cache_tier, "Cache Tier", "Upstash Redis") {
        ContainerDb(redis_cache, "Redis Cache", "Upstash Redis", "Distributed caching for performance optimization")
    }
    
    Deployment_Node(vector_tier, "Vector Database Tier", "Pinecone") {
        ContainerDb(vector_db, "Vector Database", "Pinecone", "Vector storage for semantic search")
    }
}

Deployment_Node(inference_engine_tier, "inference_engine Tier", "GCP/Self-hosted") {
    Container(inference_engineapi, "inference_engine API", "inference_engine", "LLM inference engine")
    Container(ngrok, "ngrok", "ngrok", "Secure tunneling for development")
}

Rel(browser, frontend_app, "Accesses", "HTTPS")
Rel(frontend_app, gateway_service, "Makes API calls to", "HTTPS")

Rel(gateway_service, auth_service, "Routes authentication requests to", "HTTP")
Rel(gateway_service, admin_service, "Routes administration requests to", "HTTP")
Rel(gateway_service, explore_service, "Routes exploration requests to", "HTTP")
Rel(gateway_service, conversation_service, "Routes conversation requests to", "HTTP")

Rel(auth_service, sql_server, "Reads from and writes to", "TDS")
Rel(admin_service, sql_server, "Reads from and writes to", "TDS")
Rel(explore_service, sql_server, "Reads from and writes to", "TDS")
Rel(conversation_service, sql_server, "Reads from and writes to", "TDS")

Rel(auth_service, redis_cache, "Caches data in", "Redis Protocol")
Rel(admin_service, redis_cache, "Caches data in", "Redis Protocol")
Rel(explore_service, redis_cache, "Caches data in", "Redis Protocol")
Rel(conversation_service, redis_cache, "Caches data in", "Redis Protocol")

Rel(conversation_service, vector_db, "Stores and retrieves vectors from", "HTTPS")
Rel(admin_service, inference_enginea_api, "Manages models via", "HTTPS")
Rel(conversation_service, inference_engine_api, "Sends chat requests to", "HTTPS")

Rel(inference_engine_api, ngrok, "Exposed via", "HTTP")

@enduml 